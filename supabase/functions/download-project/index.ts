import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface FileData {
  name: string;
  path: string;
  content: string;
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { files }: { files: FileData[] } = await req.json();
    console.log('Creating ZIP for', files.length, 'files');

    // Create a simple ZIP file structure in memory
    // This is a basic implementation - for production, consider using a proper ZIP library
    const zipData = await createZipFile(files);

    return new Response(JSON.stringify({ zipData }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Error creating ZIP:', error);
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});

async function createZipFile(files: FileData[]): Promise<string> {
  // Simple ZIP file creation (basic implementation)
  // In a real application, you'd use a proper ZIP library
  
  let zipContent = '';
  
  // Add each file to the "zip"
  for (const file of files) {
    const fileName = file.path.startsWith('/') ? file.path.slice(1) : file.path;
    zipContent += `--- FILE: ${fileName} ---\n`;
    zipContent += file.content;
    zipContent += '\n\n';
  }
  
  // Add a manifest
  zipContent += '--- PROJECT MANIFEST ---\n';
  zipContent += 'Generated by AI Copilot\n';
  zipContent += `Files: ${files.length}\n`;
  zipContent += `Generated: ${new Date().toISOString()}\n\n`;
  zipContent += 'File list:\n';
  files.forEach(file => {
    zipContent += `- ${file.path}\n`;
  });

  // Return base64 encoded content (simpler than actual ZIP for this demo)
  return btoa(zipContent);
}